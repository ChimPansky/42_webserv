import re
import sys
import os

ENUM_NAME = "ResponseCode"
ENUM_PREFIC = "HTTP_"

GET_NAME_FUNC_NAME = "GetResponseCodeDescr"

WARNING_COMMENT = "// THIS FILE IS GENERATED BY response_code_gen.py\n" \
                  "// DO NOT CHANGE IT MANUALLY\n\n"
IFNDEF_GUARD = "GENERATED_RESPONSE_CODES_H"
NAMESPACE = "http"

def generate_files(input_file, header_file, source_file):
    # Regular expression to parse the response code file
    line_pattern = re.compile(r"(\d+)\s+([^\#]+)(?:\s*#\s*(.*))?")

    # Read and parse the response codes
    response_codes = []  # list of touples: code - enum-name - description - comment
    with open(input_file, "r") as f:
        for line in f:
            if (not line.strip() or line.strip()[0] == "#"):
                continue
            match = line_pattern.match(line.strip())
            if match:
                code, descr, comment = match.groups()
                descr = descr.strip()
                enum_name = ENUM_PREFIC + re.sub(r"[\s\-'']", "_", descr.upper())
                response_codes.append((int(code), enum_name, descr, comment))
            else:
                print(f"Error: line '{line}' does not match expected pattern.")
                sys.exit(1)

    # Generate the ResponseCodes.h content
    with open(header_file, "w") as h_file:
        h_file.write(WARNING_COMMENT)
        h_file.write(f"#ifndef {IFNDEF_GUARD}\n")
        h_file.write(f"#define {IFNDEF_GUARD}\n\n")
        h_file.write(f"namespace {NAMESPACE} {{\n\n")

        # Define the enum values
        h_file.write(f"enum {ENUM_NAME} {{\n")
        for code, enum_name, descr, _ in response_codes:
            h_file.write(f"    {enum_name} = {code},\n")
        h_file.write("};\n\n")

        # Declare the GetResponseCodeDescr function
        h_file.write(f"const char* {GET_NAME_FUNC_NAME}({ENUM_NAME} rc);\n\n")
        h_file.write(f"}}  // namespace {NAMESPACE}\n\n")
        h_file.write(f"#endif  // {IFNDEF_GUARD}\n")

    # Generate the ResponseCodes.cpp content
    with open(source_file, "w") as cpp_file:
        cpp_file.write(WARNING_COMMENT)
        cpp_file.write(f'#include "{header_file.split("/")[-1]}"\n')
        cpp_file.write(f'#include <stdexcept>\n\n')

        cpp_file.write(f"const char* {NAMESPACE}::{GET_NAME_FUNC_NAME}({ENUM_NAME} rc) {{\n")

        # Switch-case:
        cpp_file.write("    switch (rc) {\n")
        for code, enum_name, descr, _ in response_codes:
            cpp_file.write(f"        case {enum_name}: return \"{descr}\";\n")
        cpp_file.write(f"        default: return \"UNKNOWN\";\n")
        cpp_file.write("    }\n")
        cpp_file.write("}\n")
    print(f"Generated {header_file} and {source_file} based on {input_file}.")


# Main function to handle command-line arguments
if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python generate_response_codes.py <input_file> <hdr_to_gen> <src_to_gen>")
        sys.exit(1)

    input_file = sys.argv[1]
    header_file = sys.argv[2]
    source_file = sys.argv[3]

    # Check if input file exists
    if not os.path.isfile(input_file):
        print(f"Error: Input file '{input_file}' does not exist.")
        sys.exit(1)

    generate_files(input_file, header_file, source_file)
