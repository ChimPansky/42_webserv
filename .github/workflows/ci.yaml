# .github/workflows/ci_workflow.yaml
name: CI Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - main

env:
  HOME: /home/runner

jobs:
  check-commit-message:
    name: Check Commit Message
    runs-on: ubuntu-22.04  # ubuntu-latest is now 24.0 (noble) which causes trouble with clang-12, so stay at 22.0 (jammy)
    steps:
      - name: Check Title Format
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '\[[A-Z]+\] \S.*'
          error: 'PR title hast to start with a commit type - for example [REFACTOR] - followed by a description".'
          excludeDescription: 'false'  # Check the entire commit message
          excludeTitle: 'false'  # Do not exclude the title
          checkAllCommitMessages: 'false'  # Check only the PR title, assuming it's the first commit
        if: github.event_name == 'pull_request' && !contains(github.event.pull_request.title, 'Merge pull request') && !contains(github.event.pull_request.title, 'Merge branch')
      - name: Check Last Commit Message Format
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^[a-z]+(?:\([^\)]*\))?(?:!)?: \S.*|^Merge pull request #[0-9]+ from [\w\-]+\/[\w\-].*'
          error: 'Commit messages must follow the format "<type>[(optional scope)][!]: <description>.". See https://stackoverflow.com/questions/8981194/changing-git-commit-message-after-push-given-that-no-one-pulled-from-remote on stackoverflow for renames'
          excludeDescription: 'true' # optional: this excludes the description body of a pull request
          excludeTitle: 'true' # optional: this excludes the title of a pull request
          checkAllCommitMessages: 'false' # optional: this checks all commits associated with a pull request
      - name: Check Last Commit Message Length
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^.{0,100}$'
          error: 'The last commit message cannot be longer than 100 characters.'
          excludeDescription: 'true' # optional: this excludes the description body of a pull request
          excludeTitle: 'true' # optional: this excludes the title of a pull request
          checkAllCommitMessages: 'false' # optional: this checks all commits associated with a pull request
          # accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true
        if: (!contains(github.event.pull_request.title, 'Merge pull request') && !contains(github.event.pull_request.title, 'Merge branch'))
  compilation_and_tests:
    name: Compilation And Test
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      fail-fast: false
    steps:
      - name: Checkout source branch of pull request
        uses: actions/checkout@v4
      # - name: Build Project
      #   uses: threeal/cmake-action@v2.0.0
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.14'
      - name: Set up test environment
        uses: ./.github/actions/setup
      - name: Use cmake
        run: cmake --version
      - name: Set up Clang 12
        run: |
          mkdir -p $HOME/clang
          cd $HOME/clang
          # Download Clang 12
          curl -LO https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-20.04.tar.xz
          tar -xf clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-20.04.tar.xz
          # Rename clang and clang++ to cc and c++
          mv clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-20.04/bin/clang $HOME/clang/bin/cc
          mv clang+llvm-12.0.1-x86_64-linux-gnu-ubuntu-20.04/bin/clang++ $HOME/clang/bin/c++
          # Set environment variables for CC and CXX
          echo "export CC=$HOME/clang/bin/cc" >> $GITHUB_ENV
          echo "export CXX=$HOME/clang/bin/c++" >> $GITHUB_ENV
          echo "export PATH=$HOME/clang/bin:$PATH" >> $GITHUB_ENV
      - name: Check Clang Version
        run: clang --version && cc --version && c++ --version
      - name: generate Makefiles
        run: mkdir -p build && cd build && cmake ..
      - name: compilation
        run: cd build && make
      - name: test
        run: cd build && ctest
