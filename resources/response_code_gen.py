# possible todo: integrate with cmake codegeneration

import re

# Input and output file names
input_file = "http_response_codes.txt"
header_file = "ResponseCodes.h"
source_file = "ResponseCodes.cpp"

# Regular expression to parse the response code file
line_pattern = re.compile(r"(\d+)\s+(.+)")

# Read and parse the response codes
response_codes = []
with open(input_file, "r") as f:
    for line in f:
        match = line_pattern.match(line.strip())
        if match:
            code, name = match.groups()
            response_codes.append((int(code), name))

# Generate the ResponseCodes.h content
with open(header_file, "w") as h_file:
    h_file.write("// This file is generated by resources/response_code_gen.py\n")
    h_file.write("// Do not change it manually\n\n")
    h_file.write("#ifndef RESPONSE_CODES_H\n")
    h_file.write("#define RESPONSE_CODES_H\n\n")
    h_file.write("namespace http {\n\n")
    h_file.write("enum ResponseCode {\n")

    # Define the enum values
    for code, name in response_codes:
        enum_name = "RC_" + re.sub(r"[\s\-'']", "_", name.upper())
        h_file.write(f"    {enum_name} = {code},\n")

    h_file.write("};\n\n")

    # Declare the GetResponseCodeName function
    h_file.write("const char* GetResponseCodeName(ResponseCode rc);\n\n")
    h_file.write("}  // namespace http\n\n")
    h_file.write("#endif // RESPONSE_CODES_H\n")

# Generate the ResponseCodes.cpp content
with open(source_file, "w") as cpp_file:
    cpp_file.write("// This file is generated by resources/response_code_gen.py\n")
    cpp_file.write("// Do not change it manually\n\n")
    cpp_file.write(f'#include "{header_file}"\n\n')
    cpp_file.write("const char* http::GetResponseCodeName(ResponseCode rc) {\n")
    cpp_file.write("    switch (rc) {\n")

    # Define each case in the switch statement
    for code, name in response_codes:
        enum_name = "RC_" + re.sub(r"[\s\-'']", "_", name.upper())
        cpp_file.write(f"        case {enum_name}: return \"{name}\";\n")

    # Default case if no match is found
    cpp_file.write("        default: return \"Unknown\";\n")
    cpp_file.write("    }\n")
    cpp_file.write("}\n")

print(f"Generated {header_file} and {source_file} based on {input_file}.")
